{"version":3,"sources":["Components/Header.js","Components/GamePlay.js","Components/GameOver.js","Components/GameHistory.js","Components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","generateRandomNumber","validNums","randomIdx","Math","floor","random","length","genNumber","splice","push","i","determineBullsAndCows","secretNum","attempt","bulls","cows","toString","console","log","possibleCows","j","includes","GameOver","props","gameProgress","gameState","secretNumber","GameHistory","logs","map","idx","ErrorMessage","errorBody","error","App","useState","Array","from","updateLogs","_setSecretNumber","setAttempt","setGameState","errorMessage","setErrorMessage","handleInput","set","Set","has","isNaN","add","size","isAttemptProper","Error","isAlreadyAttempted","updatedLog","newLog","insertGameHistory","isGameOver","message","id","type","onKeyPress","e","key","onChange","target","value","disabled","placeholder","onClick","Alerts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df77f7da.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <h2>Bulls and Cows</h2>\n    </div>\n  );\n};\n\nexport default Header;\n","// generate a random number of 4 digits\n// number cannot start with 0\n// each digits must be unique\nexport const generateRandomNumber = () => {\n  // valid numbers are only 1-9, this indicates that value cannot start with 0\n  let validNums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  // generates random index from validNums only\n  let randomIdx = Math.floor(Math.random() * validNums.length);\n  // genNumber is the new random numbers which are spliced together\n  let genNumber = validNums.splice(randomIdx, 1)[0];\n\n  // makes 0 is now valid digit but not at the start of the guess\n  validNums.push(0);\n  for (let i = 0; i < 3; i++) {\n    randomIdx = Math.floor(Math.random() * validNums.length);\n    // same as above, but pushes 0 to next digit\n    genNumber = genNumber * 10 + validNums.splice(randomIdx, 1)[0];\n  }\n  return genNumber;\n};\n\n// finds the bulls an cows - string format\n// bulls = correct number and position\n// cows = correct number\nexport const determineBullsAndCows = (secretNum, attempt) => {\n  // initial value of bulls and cows are 0\n  // console logs the secret number for reference (only logs everytime a value has been placed)\n  let bulls = 0;\n  let cows = 0;\n\n  secretNum = secretNum.toString();\n  attempt = attempt.toString();\n  console.log(secretNum);\n\n  let possibleCows = [];\n\n  // for loop - loops i for bulls - checks if secret number i is equal to attempt i, if so bull +1\n  for (let i = 0; i < secretNum.length; i++) {\n    if (secretNum[i] === attempt[i]) {\n      bulls += 1;\n      // else, push to possibleCows (code below)\n    } else {\n      possibleCows.push(attempt[i]);\n    }\n  }\n  // for loo for cows - checks if secret number i is equal to attempt i, if so cows +1\n  for (let j = 0; j < possibleCows.length; j++) {\n    if (secretNum.includes(possibleCows[j])) {\n      cows += 1;\n    }\n  }\n  // final return - bulls and cows string value\n  return bulls + \" Bulls \" + cows + \" Cows\";\n};\n\n// checks if attempt was already made\nexport const isAlreadyAttempted = (logs, attempt) => {\n  for (let i = 0; i < logs.length; i++) {\n    if (logs[i][0] === attempt) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// checks if attempt is valid: 4 digits. all unique. not starting with 0.\n// set size reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\n//\nexport function isAttemptProper(attempt) {\n  attempt = attempt.toString();\n  let set = new Set();\n\n  // can't start with 0.\n  if (attempt[0] === \"0\") {\n    return false;\n  }\n  // checks for unique 4 digits.\n  for (let i = 0; i < attempt.length; i++) {\n    if (set.has(attempt[i]) || isNaN(attempt[i])) {\n      return false;\n    }\n    set.add(attempt[i]);\n  }\n  // size (returns the number of unique elements), if size is !== 4, return false\n  if (set.size !== 4) {\n    return false;\n  }\n  // otherwise return attemptProper as true\n  return true;\n}\n\n// isGameOver - return \"WIN\", \"LOSE\", \"IN PROGRESS\"\nexport const isGameOver = (logs) => {\n  for (let i = 0; i < 12; i++) {\n    // find win condition - if logs equal to \"4 Bulls 0 Cows, return win\"\n    if (logs[i][1] === \"4 Bulls 0 Cows\") {\n      return \"WIN\";\n    }\n    // game is in progress\n    if (logs[i].length === 0) {\n      return \"IN PROGRESS\";\n    }\n  }\n  // no win was found within 12 tries.\n  return \"LOSE\";\n};\n","import React from \"react\";\n\nconst GameOver = (props) => {\n  let gameProgress = <div></div>;\n  if (props.gameState === \"WIN\") {\n    gameProgress = (\n      <div className=\"game-over\">\n        Good job! {props.secretNumber} is the correct answer!\n      </div>\n    );\n  } else if (props.gameState === \"LOSE\") {\n    gameProgress = (\n      <div className=\"game-over\">\n        {\" \"}\n        Try Again! The correct answer is {props.secretNumber}\n      </div>\n    );\n  }\n\n  return <div>{gameProgress}</div>;\n};\n\nexport default GameOver;\n","import React from \"react\";\n\nconst GameHistory = (props) => {\n  return (\n    <div className=\"attempt-container\">\n      <div className=\"attempt-individual\">\n        <div className=\"attempt-title\">Attempt </div>\n        <div className=\"attempt-title\">Guess</div>\n        <div className=\"attempt-title\">Bulls & Cows</div>\n      </div>\n      {props.logs.map((log, idx) => (\n        <div className=\"attempt-individual\" key={idx}>\n          <div className=\"attempt-details\">Number {idx + 1} </div>\n          <div className=\"attempt-details\">{log[0]}</div>\n          <div className=\"attempt-details\">{log[1]}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GameHistory;\n","import React from \"react\";\n\nconst ErrorMessage = (props) => {\n  let errorBody = <div className=\"alerts\">&nbsp;</div>;\n\n  if (props.error) {\n    errorBody = <div className=\"alerts\">{props.error}</div>;\n  }\n  return <div>{errorBody}</div>;\n};\n\nexport default ErrorMessage;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport {\n  generateRandomNumber,\n  isAlreadyAttempted,\n  isAttemptProper,\n  determineBullsAndCows,\n  isGameOver,\n} from \"./Components/GamePlay\";\nimport GameOver from \"./Components/GameOver\";\nimport GameHistory from \"./Components/GameHistory\";\nimport Alerts from \"./Components/Alerts\";\n\nfunction App() {\n  //sets the guess array to only allow 12 attempts (initial state - 12 empty arrays)\n  const [logs, updateLogs] = useState(Array.from(Array(12), () => []));\n  // generates the secret number - state of random number - blank\n  const [secretNumber, _setSecretNumber] = useState(generateRandomNumber());\n  // setts attempt state to blank string\n  const [attempt, setAttempt] = useState(\"\");\n  // sets game state to inprogress - in progress state allows user to make attempts and enables the \"guess button\"\n  const [gameState, setGameState] = useState(\"IN PROGRESS\");\n  // sets the error message to null\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  function handleInput() {\n    //try statement tests the block of code for errors\n    try {\n      // if the attempt is NOT \"proper\" (declared in gameplay (<4 digits, starts with 0, blank))\n      if (!isAttemptProper(attempt)) {\n        throw new Error(\n          \"INVALID DATA ENTRY! Item must contain 4 unique digits and must not start with 0.\"\n        );\n      }\n      // if data has already been logged - also declared in gameplay\n      if (isAlreadyAttempted(logs, attempt)) {\n        throw new Error(\n          \"INVALID DATA ENTRY! You already tried that combination.\"\n        );\n      }\n      // code that declares game history - updates the logs\n      let updatedLog = insertGameHistory();\n      updateLogs(updatedLog);\n      // clears the input field\n      setAttempt(\"\");\n      // checks the game state - if game is over or still in progress\n      setGameState(isGameOver(updatedLog));\n      // error prompt hides in the screen if there are no errors\n      setErrorMessage(null);\n\n      //catch statements handles the error\n    } catch (error) {\n      setAttempt(\"\");\n      setErrorMessage(error.message);\n    }\n  }\n\n  // inserts the valid attempt in the next available slot\n  function insertGameHistory() {\n    // creates a copy of the new logs\n    let newLog = [...logs];\n    // for loop for the new log per attempt\n    for (let i = 0; i < 12; i++) {\n      if (newLog[i].length === 0) {\n        // checks for number of bulls and cows\n        // checks secret numebr against attempt (logs # of bulls and # of cows)\n        newLog[i] = [attempt, determineBullsAndCows(secretNumber, attempt)];\n        break;\n      }\n    }\n    // returns the newLog to the board\n    return newLog;\n  }\n\n  // updates attempt as input changes\n  function handleInputChange(e) {\n    setAttempt(e.target.value);\n  }\n\n  // guess input is placed once ENTER is pressed\n  function keyPress(e) {\n    if (e.key === \"Enter\") {\n      handleInput();\n    }\n  }\n\n  // resets the states to start a new game\n  // same values declared  in the set state code\n  function reset() {\n    updateLogs(Array.from(Array(12), () => []));\n    _setSecretNumber(generateRandomNumber());\n    setAttempt(\"\");\n    setErrorMessage(\"\");\n    setGameState(\"IN PROGRESS\");\n  }\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <div className=\"input-container\">\n        <input\n          id=\"numberInput\"\n          type=\"number\"\n          onKeyPress={keyPress}\n          onChange={handleInputChange}\n          //from gameplay\n          value={attempt}\n          //disables the input field once game is over\n          disabled={gameState !== \"IN PROGRESS\" ? \"disabled\" : \"\"}\n          placeholder=\"Enter 4 unique digits here\"\n          className=\"input-text\"\n        ></input>\n        <div>\n          <button\n            //disables the guess button once game is over\n            disabled={gameState !== \"IN PROGRESS\" ? \"disabled\" : \"\"}\n            onClick={() => handleInput()}\n            className=\"guess-button\"\n          >\n            Guess\n          </button>\n          <button className=\"reset-button\" onClick={() => reset()}>\n            Reset\n          </button>\n        </div>\n      </div>\n      <div className=\"\">\n        <Alerts error={errorMessage} />\n        <GameHistory logs={logs} />\n      </div>\n      <div className=\"row\">\n        <GameOver gameState={gameState} secretNumber={secretNumber} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}